# This is the main build pipeline that verifies and publishes the software
name: Build
# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: 
    - main 
    - develop
    - 'release/**'
    - 'feature/**' 
    - 'issue/**' 
    - 'issues/**' 
    - 'dependabot/**'

  pull_request:
    branches: 
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROJECT_ NAME: podaac/hitide-profile

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test, Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout project to build and deploy
        uses: actions/checkout@v2

      ## Read the json file into the environment variables
      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: 'package.json'
          prefix: project

      ## Build the YAML file
      - name: Configure Initial YAML file and environment variables
        run: |
          echo "---" >build-info.yaml;
          echo "  service_name: \"${{ env.project_service_name }}\""      >>build-info.yaml; 
          echo "  source_service_version: \"${{ env.project_version }}\"" >>build-info.yaml; 
          echo "  build_environment: \"$(env)\""                          >>build-info.yaml; 
          echo "THE_VERSION=${{ env.project_version }}" >> $GITHUB_ENV;
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV;
          GITHUB_REF_READABLE="${GITHUB_REF//\//-}"
          echo "GITHUB_REF_READABLE=${GITHUB_REF_READABLE}" >> $GITHUB_ENV

      ## Pre-Alpha Version Generation
      - name: Version Generation for Pre-Alpha
        if: |
          ${{ startsWith(github.ref, 'refs/heads/issue') }}      ||
          ${{ startsWith(github.ref, 'refs/heads/dependabot/') }} ||
          ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
            echo "THE_ENV=sit" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version --allow-same-version version ${{ env.THE_VERSION }}-${{ env.GITHUB_REF_READABLE }}.${{ github.run_number }})" >> $GITHUB_ENV

      ## Alpha Version Generation
      - name: Version Generation for Alpha
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
            echo "THE_ENV=sit" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version version prerelease)" >> $GITHUB_ENV
            

      ## Bump RC Version
      - name: Version Generation for Release Candidates
        # If triggered by push to a release branch
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        env:
          # True if the version already has a 'rc' pre-release identifier
          BUMP_RC: ${{ contains(env.project_version, 'rc') }}
          RELEASE_VERSION: ${THE_BRANCH//*\/}
        run: |
          if [ "$BUMP_RC" == true ]; then
            echo "THE_VERSION=$(npm --no-git-tag-version version prerelease --preid rc)" >> $GITHUB_ENV
          else
            echo "THE_VERSION=$(npm --no-git-tag-version version ${{ env.RELEASE_VERSION }}-rc.1)" >> $GITHUB_ENV
          fi
          echo "THE_ENV=uat" >> $GITHUB_ENV
          echo "TARGET_ENV_UPPERCASE=UAT" >> $GITHUB_ENV

      ## Update build-info yaml file for release (Pull requests targeting main)
      - name: Version Generation for Releases
        if: ${{ github.event.pull_request.base.ref == 'main' }}
        run: |
            echo "THE_ENV=ops" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=OPS" >> $GITHUB_ENV
            echo "Modifying version number ${{ env.project_version}}"
            THE_VERSION=${{ env.project_version }}
            echo "THE_VERSION=${THE_VERSION//-*}" >> $GITHUB_ENV

      ## Update build-info yaml file for release
      - name: Update YAML file with release-specific config values - build_service_version
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'build-info.yaml'
          propertyPath: 'build_service_version'
          value: ${{ env.THE_VERSION }}
          commitChange: false
      # - name: Update YAML file with release-specific config values
      #   uses: fjogeleit/yaml-update-action@main
      #   with:
      #     valueFile: 'build-info.yaml'
      #     propertyPath: 'artifactory_base_path'
      #     value: ${{ env.ART_BASE_PATH }}
      #     commitChange: false
      - name: Update YAML file with release-specific configs - deploy_env
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'build-info.yaml'
          propertyPath: 'deploy_env'
          value: ${{ env.THE_ENV }}
          commitChange: false

      ## NPM Lint and Install
      - name: NPM Lint
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: |
          npm install
          npm run lint

      ## Tag and push the tags back to github
      - name: Tag Version
        run: |
          git config --local user.name "podaac"
          git config --local user.email podaac-tva@jpl.nasa.gov
          git commit -am '/version ${{ env.THE_VERSION }}'

      - name: Commit Tagged Version for main release
        if: github.ref == 'refs/heads/main'
        run: |
          git tag -a ${{ env.THE_VERSION }} -m 'Release of v${{ env.THE_VERSION }}'

      - name: Commit Tagged Version for non-main release
        if: github.ref != 'refs/heads/main'
        run: |
          git tag -a ${{ env.THE_VERSION }}

      - name: Push tags to origin
        run: |
          git push origin HEAD:${{ github.ref }}
          git push origin ${{ env.THE_VERSION }}

      ## Authenticate to GHCR.io for publishing docker containers
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GHCR_TOKEN}}

      ## Build docker image
      - name: Build Docker Image
        run: |
            DOCKER_TAG=$(./docker/build-docker.sh -n ${{ env.project_service_name }} -v ${{ env.THE_VERSION }})
            echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_ENV
            docker push ${DOCKER_TAG}


      ## AWS Deployment
      - name: Configure AWS Credentials as Environment Variables
        run: echo "AWS_ACCESS_KEY_ID=${{ secrets[format('AWS_ACCESS_KEY_ID_CUMULUS_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV |
             echo "AWS_SECRET_ACCESS_KEY=${{ secrets[format('AWS_SECRET_ACCESS_KEY_CUMULUS_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV

      - name: Validate AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-session-name: GitHubActions
      - run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.3
          terraform_wrapper: false

      - name: Deploy via Terraform
        env: 
          TF_VAR_docker_tag: ${{ env.DOCKER_TAG }}
          TF_VAR_EARTH_DATA_LOGIN_CLIENT_ID: ${{ secrets.EARTH_DATA_LOGIN_CLIENT_ID_SIT }}
          TF_VAR_EARTH_DATA_LOGIN_PASSWORD: ${{ secrets.EARTH_DATA_LOGIN_PASSWORD_SIT }}
        run: |
           cd terraform


      ## SHOW DEBUG INFO
      - name: Build Configuration Complete for Version ${{ env.THE_VERSION }}
        run: |
            echo "The Version: ${{ env.THE_VERSION }}"
            echo "The ENV: ${{ env.THE_ENV }}"
            echo "The Branch: ${{ env.THE_BRANCH }}"
            echo "Github Ref: ${{ github.ref }}"
            echo "Github PR Base Ref: ${{ github.event.pull_request.base.ref }}"
            echo '${{ toJSON(github)  }}'
            echo "Github Ref: ${{ github.ref }}"
            echo "Github Base Ref: ${{ github.base_ref }}"
            cat build-info.yaml

