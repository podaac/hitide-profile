# This is the main build pipeline that verifies and publishes the software
name: Build
# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: [ develop, release/**, main, feature/**, issue/**, issues/**, dependabot/** ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROJECT_ NAME: podaac/hitide-profile

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test, Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout project to build and deploy
        uses: actions/checkout@v2

      ## Read the json file into the environment variables
      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: 'package.json'
          prefix: project

      ## Build the YAML file
      - name: Configure Initial YAML file and environment variables
        run: |
          echo "---" >build-info.yaml;
          echo "  service_name: \"${{ env.project_service_name }}\""      >>build-info.yaml; 
          echo "  source_service_version: \"${{ env.project_version }}\"" >>build-info.yaml; 
          echo "  build_environment: \"$(env)\""                          >>build-info.yaml; 
          echo "THE_VERSION=${{ env.project_version }}" >> $GITHUB_ENV;
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV;
          GITHUB_REF_READABLE="${GITHUB_REF//\//-}"
          echo "GITHUB_REF_READABLE=${GITHUB_REF_READABLE}" >> $GITHUB_ENV



      ## Display branch info
      - name: Branch Info Debugging
        run: |
            echo "Github Ref: $(github.ref)"
            echo "Github Base Ref: $(github.base_ref)"



      ## NPM Tagging
      - name: Pre Alpha
        if: ${{ startsWith(github.ref, 'refs/heads/feature/') }} ||
            ${{ contains(github.base_ref, 'develop') }}
        run: |
            echo "THE_ENV=sit" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version --allow-same-version version ${{ env.THE_VERSION }}-${{ env.GITHUB_REF_READABLE }}.${{ github.run_number }})" >> $GITHUB_ENV

      ## Update build-info yaml file for alpha
      - name: Alpha
        if: ${{ startsWith(github.ref, 'refs/heads/develop/') }}
        run: |
            echo "THE_ENV=sit" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version version prerelease)" >> $GITHUB_ENV
            

      ## Update build-info yaml file for release candidates
      - name: Release Candidate
        if: ${{ contains(github.base_ref, 'master') }}
        run: |
            echo "THE_ENV=uat" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=UAT" >> $GITHUB_ENV

      ## Update build-info yaml file for release
      - name: Release
        if: ${{ startsWith(github.ref, 'refs/heads/master/') }} &&
          contains(env.THE_VERSION, "rc")
        run: |
            echo "THE_ENV=uat" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=UAT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version version prerelease --preid rc)" >> $GITHUB_ENV

      ## Update build-info yaml file for release
      - name: Release
        if: ${{ startsWith(github.ref, 'refs/heads/master/') }}
        run: |
            echo "THE_ENV=ops" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=OPS" >> $GITHUB_ENV
            echo "THE_VERSION=$(env.project_version##-*)" >> $GITHUB_ENV







      ## Update build-info yaml file for release
      - name: Update YAML file with release-specific configs
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'build-info.yaml'
          propertyPath: 'build_service_version'
          value: ${{ env.THE_VERSION }}
          commitChange: false
      - name: Update YAML file with release-specific configs
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'build-info.yaml'
          propertyPath: 'artifactory_base_path'
          value: ${{ env.ART_BASE_PATH }}
          commitChange: false
      - name: Update YAML file with release-specific configs
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'build-info.yaml'
          propertyPath: 'deploy_env'
          value: ${{ env.THE_ENV }}
          commitChange: false


      - name: Show updated YAML file
        run: cat build-info.yaml




      - name: NPM Tag
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - run: npm --no-git-tag-version --allow-same-version version ${{ env.THE_VERSION }}-${{ env.GITHUB_REF_READABLE }}.${{ github.run_number }}



# Pre-Alpha
# "npm --no-git-tag-version --allow-same-version version ${{ env.THE_VERSION }}-${GIT_BRANCH.replaceAll('/', '-')}.${{github.run_number}}"
# Alpha
# "npm --no-git-tag-version version prerelease"
# Release Candidate RC
# "npm --no-git-tag-version version prerelease --preid rc"
# Release Candidate No RC
# "npm --no-git-tag-version version ${env.CHANGE_BRANCH.split('/')[-1]}-rc.1"
# Release
# the_version = build_info['source_service_version'].split('-')[0]





      # - name: Deploy
      #   run: ls -al ; cat build-info.yaml ; cd terraform ; terraform init -reconfigure -input=false -backend-config=bucket=podaac-services-${{ env.TARGET_ENV }}-terraform ; terraform output hitide-bucket-name


#            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SERVICES_ }}
#            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SERVICES_ }}
#         container:
#           image: ${{ env.ARTIFACTORY_DOCKER_REGISTRY }}/podaac/service/deploy-terraform-0.12.31


#      node:14.5.0-alpine




      # Skip Build

      # Run Build
        # Version
          # Pre Alpha
          # Alpha
          # Minor
          # Release Candidate
          # Release
      # Test

      # Publish
        # Tag Version

      # Publish Docker Image
        # Build Image
        # Publish to Repository

      # Deploy to ECR

      # Deploy Terraform




      # # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - uses: actions/checkout@v2
      # - uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.8

      # ## Describe workspace
      # - name: Describe Workspace
      #   run: |
      #     echo "---" >build-info.yaml;
      #     echo "  build_environment: \"the_env\"" >>build-info.yaml; 
      #     ls -al
      #     cat build-info.yaml

      # ## Update build-info yaml file for pre-alpha
      # - name: Pre Alpha
      #   if: ${{ startsWith(github.ref, 'refs/heads/feature/') }} ||
      #       ${{ contains(github.base_ref, 'develop') }}
      #   run: echo "TARGET_ENV=sit" >> $GITHUB_ENV|
      #        echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV

      # ## Update build-info yaml file for alpha
      # - name: Alpha
      #   if: ${{ startsWith(github.ref, 'refs/heads/develop/') }}
      #   run: echo "TARGET_ENV=sit" >> $GITHUB_ENV|
      #        echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV

      # ## Update build-info yaml file for release candidates
      # - name: Release Candidate
      #   if: ${{ contains(github.base_ref, 'master') }}
      #   run: echo "TARGET_ENV=uat" >> $GITHUB_ENV|
      #        echo "TARGET_ENV_UPPERCASE=UAT" >> $GITHUB_ENV

      # ## Update build-info yaml file for release
      # - name: Release
      #   if: ${{ startsWith(github.ref, 'refs/heads/master/') }}
      #   run: echo "TARGET_ENV=ops" >> $GITHUB_ENV |
      #        echo "TARGET_ENV_UPPERCASE=OPS" >> $GITHUB_ENV

      # ## Update build-info yaml file for release
      # - name: Release
      #   if: env.TARGET_ENV == 'sit' || 
      #       env.TARGET_ENV == 'uat' || 
      #       env.TARGET_ENV == 'ops'
      #   uses: fjogeleit/yaml-update-action@main
      #   with:
      #     valueFile: 'build-info.yaml'
      #     propertyPath: 'deploy_env'
      #     value: ${{ env.TARGET_ENV }}
      #     commitChange: false


      # # ## Test Configuration file
      # # - name: Display Configs
      # #   run: | 
      # #     cat build-info.yaml
      # #     echo "::set-env name=TARGET_ENV::$( cat build-info.yaml.json | jq --compact-output )"

      # ## Deployment

      #   # if: ${{ startsWith(github.ref, 'refs/heads/develop/') }} ||
      #   #     ${{ startsWith(github.ref, 'refs/heads/master/') }} ||
      #   #     ${{ contains(github.base_ref, 'master') }} ||
      #   #     ${{ startsWith(github.ref, 'refs/heads/master/') }}
      # - name: Set AWS Env Variables
      #   run: echo "AWS_ACCESS_KEY_ID=${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV |
      #        echo "AWS_SECRET_ACCESS_KEY=${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV

      # - name: Configure AWS credentials 
      #   uses: aws-actions/configure-aws-credentials@v1
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
      #   with:
      #     aws-region: us-west-2
      #     role-session-name: GitHubActions
      # - run: aws sts get-caller-identity

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 0.12.31
      #     terraform_wrapper: false

      # - name: Deploy
      #   run: ls -al ; cat build-info.yaml ; cd terraform ; terraform init -reconfigure -input=false -backend-config=bucket=podaac-services-${{ env.TARGET_ENV }}-terraform ; terraform output hitide-bucket-name


#            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SERVICES_ }}
#            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SERVICES_ }}
#         container:
#           image: ${{ env.ARTIFACTORY_DOCKER_REGISTRY }}/podaac/service/deploy-terraform-0.12.31

          # ports:

          #   - 80
          # volumes:
          #   - /home/cm/.aws:/home/dockeruser/.aws:ro
          # options: --cpus 1
          # run: ls -al
