pipeline {
    agent none

    parameters { booleanParam(name: 'Bypass_Snyk_NonHigh', defaultValue: false, description: 'Option to bypass Snyk Non-high and Critical vulnerabilities')
                 choice(name: 'Snyk_Severity_Threshold', choices: ['high', 'medium', 'low', 'critical'], description: 'Synk scan threshold')
    }

    options {
        preserveStashes(buildCount: 5)
    }
    environment{
        VCS_CREDENTIALS_ID = "github.jpl.nasa.gov_devops_pw"
        ARTIFACTORY_CREDENTIALS_ID = "jenkins.cae.artifactory"
        ARTIFACTORY_URL = "https://cae-artifactory.jpl.nasa.gov/artifactory"
        ARTIFACTORY_DOCKER_REGISTRY = "cae-artifactory.jpl.nasa.gov:16003"
        SNYK_TOKEN_ID = "snyk_api_key"
        PROJECT_NAME = "podaac/hitide-profile"
    }
    stages{
        stage("Checkout"){
            agent {
                docker {
                    image 'podaac/service/build-node-14:latest'
                    label 'devops1'
                    registryUrl "https://${env.ARTIFACTORY_DOCKER_REGISTRY}"
                }
            }
            steps{
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: scm.extensions + [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'WipeWorkspace'],
                        [$class: 'LocalBranch', localBranch: '**'],
                        [$class: 'PruneStaleBranch']
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
               script{
                    def packageJson = readJSON file: 'package.json'
                    the_service = packageJson.service_name
                    the_version = packageJson.version
                    the_env = sh(returnStdout: true, script: "printenv").trim()
                }
                writeYaml file: 'build-info.yaml', data: ['service_name': the_service, 'source_service_version': the_version, 'build_environment': the_env ], overwrite: true
                stash name: 'build-info', includes: 'build-info.yaml'
                echo "Checked out $the_service $the_version"
            }
        }
        stage("Skip Build"){
            when {
                anyOf{
                    changelog '^/version.*'
                    changelog '^/jenkins skip'
                }
            }
            agent {
                docker {
                    image 'podaac/service/build-node-14:latest'
                    label 'devops1'
                    registryUrl "https://${env.ARTIFACTORY_DOCKER_REGISTRY}"
                }
            }
            steps{
                echo "Build Skipped."
                script {
                    currentBuild.result = 'NOT_BUILT'
                }
            }
        }
        stage("Run Build"){
            when {
                not{
                    anyOf{
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
            }
            agent {
                docker {
                    image 'podaac/service/build-node-14:latest'
                    label 'devops1'
                    alwaysPull true
                    registryUrl "https://${env.ARTIFACTORY_DOCKER_REGISTRY}"
                }
            }
            stages{
                stage("Version"){
                    stages {
                        stage("Pre Alpha"){
                            when {
                                anyOf{
                                    branch 'feature/*'
                                    changeRequest target: 'develop'
                                }
                            }
                            environment {
                                 GIT_COMMIT_SHORT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script:
                                        "npm --no-git-tag-version --allow-same-version version ${build_info.source_service_version}-${GIT_BRANCH.replaceAll('/', '-')}.${BUILD_NUMBER}"
                                    ).trim()
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general-develop/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16001"
                                    build_info.deploy_env = "sit"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Alpha"){
                            when {
                                branch 'develop'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script: "npm --no-git-tag-version version prerelease").trim()
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general-stage/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16002"
                                    build_info.deploy_env = "sit"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Minor"){
                            when {
                                allOf{
                                    branch 'release/*'
                                    not{
                                        changeRequest()
                                    }
                                }
                            }
                            steps{
                                dir("temp"){
                                    withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: 'develop']],
                                            extensions: [
                                                [$class: 'LocalBranch', localBranch: '**']
                                            ],
                                            userRemoteConfigs: scm.userRemoteConfigs
                                        ])
                                        sh("""
                                            git config --local user.name "podaac-cloud-dsa"
                                            git config --local user.email podaac-cloud-dsa@jpl.nasa.gov
                                            git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                            npm version prepatch -m '/version %s'
                                            git push origin HEAD:develop
                                        """)
                                    }
                                    deleteDir()
                                }
                            }
                        }
                        stage("Release Candidate"){
                            when {
                                changeRequest target: 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    cur_ver = build_info['source_service_version']
                                    if(cur_ver.contains("rc")){
                                        // increment release candidate version
                                        the_version = sh(returnStdout: true, script: "npm --no-git-tag-version version prerelease --preid rc").trim()
                                    }else{
                                        // set release candidate to version 1 and on release branch name
                                        the_version = sh(returnStdout: true, script: "npm --no-git-tag-version version ${env.CHANGE_BRANCH.split('/')[-1]}-rc.1").trim()
                                    }
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general-stage/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16002"
                                    build_info.deploy_env = "uat"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Release"){
                            when {
                                branch 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = build_info['source_service_version'].split('-')[0]
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_base_path = "general/gov/nasa/podaac"
                                    build_info.artifactory_docker_registry = "cae-artifactory.jpl.nasa.gov:16003"
                                    build_info.deploy_env = "ops"
                                }
                                sh "npm --no-git-tag-version version $the_version"
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                    }
                }
                stage("Test"){
                    steps{
                        sh """
                        npm install
                        npm run lint
                        """
                    }
                }
                stage("Publish"){
                    when {
                        anyOf{
                            branch 'develop'
                            branch 'master'
                            changeRequest target: 'master'
                        }
                    }
                    stages{
                        stage("Tag Version"){
                            environment{
                                THE_BRANCH = "${(env.CHANGE_BRANCH?:env.BRANCH_NAME)}"
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                withCredentials([usernamePassword(credentialsId: env.VCS_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                    sh("""
                                        git config --local user.name "podaac"
                                        git config --local user.email podaac-tva@jpl.nasa.gov
                                        git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                        git commit -am '/version ${build_info.build_service_version}'
                                    """)
                                    script{
                                        if(env.BRANCH_NAME == 'master'){
                                            sh "git tag -a ${build_info.build_service_version} -m 'Release of v${build_info.build_service_version}'"
                                        }else{
                                            sh "git tag ${build_info.build_service_version}"
                                        }
                                    }
                                    sh("""
                                        git push origin HEAD:${env.THE_BRANCH}
                                        git push origin ${build_info.build_service_version}
                                    """)
                                }
                            }
                            post {
                                always {
                                    sh "git config --local --unset credential.helper || true"
                                }
                                failure {
                                    // If the push fails, delete the local tag so when the build reruns it won't fail because the tag already exists
                                    sh "git tag -d ${build_info.build_service_version}"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Snyk"){
            agent {
                docker {
                    image 'artifactory.jpl.nasa.gov:16001/podaac/service/build-java-8-snyk'
                    label 'devops1'
                    registryUrl 'https://artifactory.jpl.nasa.gov:16001'
                    registryCredentialsId "${ARTIFACTORY_CREDENTIALS_ID}"
                }
            }
            stages {
                stage('Snyk Monitor') {
                    when {
                        anyOf {
                            branch 'develop'
                            branch 'release/*'
                            branch 'master'
                            branch 'main'
                        }
                    }
                    steps {
                        withCredentials([string(credentialsId: env.SNYK_TOKEN_ID, variable: 'SNYK_TOKEN')]) {
                            sh """
                            snyk monitor \
                            --project-name=${env.PROJECT_NAME} \
                            --org=po.daac
                            """		
                        }
                        
                    }
                }
                stage('Snyk Normal Run') {
                    when {
                        allOf {
                            not { expression { return params.Bypass_Snyk_NonHigh} }
                            not {
                                anyOf {
                                    branch 'develop'
                                    branch 'release/*'
                                    branch 'master'
                                    branch 'main'
                                }
                            }
                        }
                    }
                    steps {
                        withCredentials([string(credentialsId: env.SNYK_TOKEN_ID, variable: 'SNYK_TOKEN')]) {
                            sh """
                            snyk test --severity-threshold=${params.Snyk_Severity_Threshold} \
                            --project-name=${env.PROJECT_NAME} \
                            --json-file-output=snyk-report.json
                            """		
                        }
                        
                    }
                }
                stage('Snyk Non-high') {
                    when {
                        allOf {
                            expression { return params.Bypass_Snyk_NonHigh} 
                            not {
                                anyOf {
                                    branch 'develop'
                                    branch 'release/*'
                                    branch 'master'
                                    branch 'main'
                                }
                            }
                        }
                    }
                    steps {
                        withCredentials([string(credentialsId: env.SNYK_TOKEN_ID, variable: 'SNYK_TOKEN')]) {
                            sh """
                                snyk test --severity-threshold=${params.Snyk_Severity_Threshold} \
                                --project-name=${env.PROJECT_NAME} \
                                --json-file-output=snyk-report.json \
                                --fail-on=all
                            """		
                        }
                    }
                }
            }
            post {
                always {
                    sh "snyk-to-html -i snyk-report.json -o results.html -a"

                    publishHTML([reportName: 'Snyk Report',
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: ".",
                    reportFiles: 'results.html'])
                }
            }
        }
        stage("Publish Docker Image"){
            when {
                beforeAgent true
                allOf{
                    not{
                        anyOf {
                            changelog '^/version.*'
                            changelog '^/jenkins skip'
                        }
                    }
                    anyOf{
                        branch 'develop'
                        branch 'master'
                        changeRequest target: 'master'
                        changelog '^/jenkins deploy'
                    }
                }
            }
            agent {
                label 'dockerce'
            }
            stages{
                stage("Build Image"){
                    steps{
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                        }
                        echo "Build image for ${build_info.build_service_version}"
                        script{
                            build_info.docker_tag = sh(returnStdout: true, script: "./docker/build-docker.sh -n ${build_info.service_name} -v ${build_info.build_service_version}").trim()
                        }
                        writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                        stash name: 'build-info', includes: 'build-info.yaml'
                    }
                }
                stage("Publish to Artifactory"){
                    steps{
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                        }
                        echo "Publishing ${build_info.docker_tag} to Artifactory"
                        withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                            sh "./docker/push-docker-artifactory.sh -t ${build_info.docker_tag} -r ${build_info.artifactory_docker_registry} -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PASSWORD}"
                        }
                    }
                }
            }
            post {
                success {
                    // If we push to Artifactory, remove the image to save space locally
                    unstash name: 'build-info'
                    script{
                        build_info = readYaml file: 'build-info.yaml'
                    }
                    sh("""
                        docker rmi ${build_info.docker_tag} || true
                        docker rmi ${build_info.artifactory_docker_registry}/${build_info.docker_tag} || true
                    """)
                }
            }
        }
        stage("Deploy ECR"){
            when {
                not{
                    anyOf {
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
                anyOf{
                    branch 'develop'
                    branch 'master'
                    changeRequest target: 'master'
                    changelog '^/jenkins deploy'
                }
            }
            agent {
                node("devops1")
            }
            steps{
                unstash name: 'build-info'
                script{
                    build_info = readYaml file: 'build-info.yaml'
                }
                echo "Publishing ${build_info.docker_tag} to ECR"
                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                    sh("""
                        docker login --username "${ARTIFACTORY_USER}" --password "${ARTIFACTORY_PASSWORD}" "${build_info.artifactory_docker_registry}"
                        docker pull ${build_info.artifactory_docker_registry}/${build_info.docker_tag}                        
                        docker tag ${build_info.artifactory_docker_registry}/${build_info.docker_tag} ${build_info.docker_tag}
                        ./docker/push-docker-ecr.sh -v ngap-service-${build_info.deploy_env} -t ${build_info.docker_tag}
                    """)
                }
            }
            post {
                success {
                    // remove docker images after push to AWS
                    unstash name: 'build-info'
                    script{
                        build_info = readYaml file: 'build-info.yaml'
                    }
                    sh("""
                        docker rmi ${build_info.artifactory_docker_registry}/${build_info.docker_tag} || true
                        docker rmi ${build_info.docker_tag} || true
                    """)
                }
            }
        }
        
        stage("Deploy Terraform"){
            when {
                not{
                    anyOf {
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
                anyOf{
                    branch 'develop'
                    branch 'master'
                    changeRequest target: 'master'
                    changelog '^/jenkins deploy'
                    changelog '^/jenkins terraform'
                }
            }
            agent {
                docker {
                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/deploy-terraform-1.0.3"
                    label 'devops1'
                    alwaysPull true
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            environment {
                EDL_CREDENTIALS = credentials("hitide-profile-cloud-edl-credentials${env.BRANCH_NAME == 'master' ? '' : '-uat'}")
            }
            steps{
                unstash name: 'build-info'
                script{
                    build_info = readYaml file: 'build-info.yaml'
                }
                echo "Publishing ${build_info.build_service_version} to ${build_info.deploy_env}"

                dir('terraform') {
                    sh """
                    export TF_VAR_EARTH_DATA_LOGIN_CLIENT_ID=$EDL_CREDENTIALS_USR
                    export TF_VAR_EARTH_DATA_LOGIN_PASSWORD=$EDL_CREDENTIALS_PSW
                    export TF_VAR_docker_tag=${build_info.docker_tag}

                    bin/deploy.sh -v ${build_info.deploy_env} --app-version ${build_info.build_service_version}
                    """
                }
            }
        }
    }
}
